// GENERATED BY mini-sb.rb WITH sb.sb

return NODE(Main, 1, LIST(NODE(Peg, 2, STR("Regexp"), LIST(NODE(PegRule, 2, STR("CharClass"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 1, NODE(RefRule, 1, STR("CharGroup")))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("SingleChar"))),
NODE(Term, 1, STR("op.minus")),
NODE(Term, 1, NODE(RefRule, 1, STR("SingleChar")))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("CharRange"), LIST(NODE(Capture, 1, STR("$3")),
NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("SingleChar")))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("CharRange"), LIST(NODE(Capture, 1, STR("$1")),
NODE(Capture, 1, STR("$1"))))))))),
NODE(PegRule, 2, STR("CharGroup"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 1, STR("char-group.predef"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("CharGroupPredef"), LIST(NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, STR("unicode-char-class"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("UnicodeCharClass"), LIST(NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, STR("end.char-group")),
NODE(TermPlus, 1, NODE(RefRule, 1, STR("CharClass"))),
NODE(Term, 1, STR("begin.char-group"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("BracketCharGroup"), LIST(NODE(Capture, 1, STR("$2")),
NODE(Capture, 1, STR("$1"))))))))),
NODE(PegRule, 2, STR("Group"), NODE(SeqRule, 2, LIST(NODE(Term, 1, STR("end.group")),
NODE(Term, 1, NODE(RefRule, 1, STR("Branches"))),
NODE(Term, 1, STR("group.special")),
NODE(Term, 1, STR("begin.group"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Group"), LIST(NODE(Capture, 1, STR("$3")),
NODE(Capture, 1, STR("$2"))))))))),
NODE(PegRule, 2, STR("SingleChar"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 1, NODE(RefRule, 1, STR("RegexpEscape")))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))), LIST(NODE(Term, 1, STR("op.minus"))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))), LIST(NODE(Term, 1, STR("char"))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1"))))))),
NODE(PegRule, 2, STR("Unit"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 1, NODE(RefRule, 1, STR("SingleChar")))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("CharGroup")))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Group")))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))), LIST(NODE(Term, 1, STR("interpolate.predef"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("PredefInterpolate"), LIST(NODE(Capture, 1, STR("$1"))))))))),
NODE(PegRule, 2, STR("SeqUnit"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 1, STR("anchor"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("PredefAnchor"), LIST(NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, STR("flag.case-insensitive"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Flag"), LIST(NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, STR("flag.case-sensitive"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Flag"), LIST(NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, STR("flag.encoding"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Flag"), LIST(NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, STR("quantifier")),
NODE(Term, 1, NODE(RefRule, 1, STR("Unit")))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Quantified"), LIST(NODE(Capture, 1, STR("$2")),
NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, STR("quantifier.kind")),
NODE(Term, 1, STR("end.quantifier")),
NODE(TermMaybe, 1, STR("quantifier.range.to")),
NODE(Term, 1, STR("quantifier.range.from")),
NODE(Term, 1, STR("begin.quantifier")),
NODE(Term, 1, NODE(RefRule, 1, STR("Unit")))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("QuantifiedRange"), LIST(NODE(Capture, 1, STR("$6")),
NODE(Capture, 1, STR("$4")),
NODE(Capture, 1, STR("$3")),
NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Unit")))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1"))))))),
NODE(PegRule, 2, STR("Seq"), NODE(SeqRule, 2, LIST(NODE(TermStar, 1, NODE(RefRule, 1, STR("SeqUnit")))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Seq"), LIST(NODE(Capture, 1, STR("$1"))))))))),
NODE(PegRule, 2, STR("Branches"), NODE(Branch, 4, STR("/*"), NODE(SeqRule, 2, LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Seq")))), LIST(NODE(Callback, 1, LIST(NODE(CreateList, 1, LIST(NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Seq"))),
NODE(Term, 1, STR("op.branch"))), LIST(NODE(Callback, 1, LIST(NODE(CreateList, 1, LIST(NODE(SplatEntry, 1, NODE(Capture, 1, STR("$1"))),
NODE(Capture, 1, STR("$3"))))))))),
NODE(PegRule, 2, STR("Regexp"), NODE(SeqRule, 2, LIST(NODE(Term, 1, STR("end.regexp")),
NODE(Term, 1, NODE(RefRule, 1, STR("Branches"))),
NODE(Term, 1, STR("begin.regexp"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Regexp"), LIST(NODE(Capture, 1, STR("$2"))))))))))),
NODE(Peg, 2, STR("Callback"), LIST(NODE(PegRule, 2, STR("If.Else"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 1, STR("kw.end"))), LIST()), LIST(NODE(Term, 1, STR("kw.end")),
NODE(Term, 1, NODE(RefRule, 1, STR("Lines"))),
NODE(Term, 1, STR("kw.else"))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$2")))))), LIST(NODE(Term, 1, STR("kw.end")),
NODE(Term, 1, STR("kw.else"))), LIST()), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("If"))),
NODE(Term, 1, STR("kw.else"))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$2"))))))),
NODE(PegRule, 2, STR("If"), NODE(SeqRule, 2, LIST(NODE(Term, 1, NODE(RefRule, 1, STR("If.Else"))),
NODE(Term, 1, NODE(RefRule, 1, STR("Lines"))),
NODE(Term, 1, STR("space.eol")),
NODE(Term, 1, NODE(RefRule, 1, STR("Expr"))),
NODE(Term, 1, STR("kw.if"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("If"), LIST(NODE(Capture, 1, STR("$5")),
NODE(Capture, 1, STR("$4")),
NODE(Capture, 1, STR("$2"))))))))),
NODE(PegRule, 2, STR("Lines"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Lines"))),
NODE(Term, 1, NODE(RefRule, 1, STR("Expr")))), LIST(NODE(Callback, 1, LIST(NODE(CreateList, 1, LIST(NODE(SplatEntry, 1, NODE(Capture, 1, STR("$2"))),
NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Lines"))),
NODE(Term, 1, STR("space.eol"))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$2")))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("EPSILON")))), LIST())),
NODE(PegRule, 2, STR("Entries"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Entries"))),
NODE(Term, 1, NODE(RefRule, 1, STR("Expr")))), LIST(NODE(Callback, 1, LIST(NODE(CreateList, 1, LIST(NODE(SplatEntry, 1, NODE(Capture, 1, STR("$2"))),
NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Entries"))),
NODE(Term, 1, NODE(RefRule, 1, STR("Expr"))),
NODE(Term, 1, STR("op.prefix.splat"))), LIST(NODE(Callback, 1, LIST(NODE(CreateList, 1, LIST(NODE(SplatEntry, 1, NODE(Capture, 1, STR("$3"))),
NODE(CreateNode, 2, STR("SplatEntry"), LIST(NODE(Capture, 1, STR("$2")))))))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Entries"))),
NODE(Term, 1, STR("space.eol"))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$2")))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("EPSILON")))), LIST())),
NODE(PegRule, 2, STR("Unit"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 1, STR("end.paren")),
NODE(Term, 1, NODE(RefRule, 1, STR("Lines"))),
NODE(Term, 1, STR("begin.paren"))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$2")))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Unit"))),
NODE(Term, 1, STR("op.prefix"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Call"), LIST(NODE(CreateList, 1, LIST(NODE(Capture, 1, STR("$2")))),
NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, STR("lit.int"))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))), LIST(NODE(Term, 1, STR("lit.true"))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))), LIST(NODE(Term, 1, STR("lit.false"))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))), LIST(NODE(Term, 1, STR("lit.nil"))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("String")))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))), LIST(NODE(Term, 1, STR("name.var.capture"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Capture"), LIST(NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, STR("end.list")),
NODE(Term, 1, NODE(RefRule, 1, STR("Entries"))),
NODE(Term, 1, STR("begin.list")),
NODE(Term, 1, STR("name.type"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("CreateNode"), LIST(NODE(Capture, 1, STR("$3")),
NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, STR("end.list")),
NODE(Term, 1, NODE(RefRule, 1, STR("Entries"))),
NODE(Term, 1, STR("begin.list"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("CreateList"), LIST(NODE(Capture, 1, STR("$2")))))))), LIST(NODE(TermStar, 1, NODE(RefRule, 1, STR("Expr"))),
NODE(Term, 1, STR("name.func"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Call"), LIST(NODE(Capture, 1, STR("$2")),
NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Expr"))),
NODE(Term, 1, STR("op.eq")),
NODE(Term, 1, STR("space.pre-eq")),
NODE(Term, 1, STR("name.var"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Assign"), LIST(NODE(Capture, 1, STR("$4")),
NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, STR("name.var"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("VarRef"), LIST(NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, STR("name.var.global"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("VarRef"), LIST(NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("If")))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1"))))))),
NODE(PegRule, 2, STR("Infix.Multitive"), NODE(Branch, 4, STR("/*"), NODE(SeqRule, 2, LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Unit")))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Unit"))),
NODE(Term, 1, STR("op.infix.multitive"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Call"), LIST(NODE(CreateList, 1, LIST(NODE(Capture, 1, STR("$1")),
NODE(Capture, 1, STR("$3")))),
NODE(Capture, 1, STR("$2"))))))))),
NODE(PegRule, 2, STR("Infix.Additive"), NODE(Branch, 4, STR("/*"), NODE(SeqRule, 2, LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Infix.Multitive")))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Infix.Multitive"))),
NODE(Term, 1, STR("op.infix.additive"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Call"), LIST(NODE(CreateList, 1, LIST(NODE(Capture, 1, STR("$1")),
NODE(Capture, 1, STR("$3")))),
NODE(Capture, 1, STR("$2"))))))))),
NODE(PegRule, 2, STR("Infix.Compare"), NODE(Branch, 4, STR("/*"), NODE(SeqRule, 2, LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Infix.Additive")))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Infix.Additive"))),
NODE(Term, 1, STR("op.infix.compare"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Call"), LIST(NODE(CreateList, 1, LIST(NODE(Capture, 1, STR("$1")),
NODE(Capture, 1, STR("$3")))),
NODE(Capture, 1, STR("$2"))))))))),
NODE(PegRule, 2, STR("Infix.Logic"), NODE(Branch, 4, STR("/*"), NODE(SeqRule, 2, LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Infix.Compare")))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Infix.Compare"))),
NODE(Term, 1, STR("op.infix.logic"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("InfixLogic"), LIST(NODE(Capture, 1, STR("$3")),
NODE(Capture, 1, STR("$2")),
NODE(Capture, 1, STR("$1"))))))))),
NODE(PegRule, 2, STR("Expr"), NODE(SeqRule, 2, LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Infix.Logic")))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1"))))))),
NODE(PegRule, 2, STR("Stmts"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Stmts"))),
NODE(Term, 1, NODE(RefRule, 1, STR("Expr")))), LIST(NODE(Callback, 1, LIST(NODE(CreateList, 1, LIST(NODE(SplatEntry, 1, NODE(Capture, 1, STR("$2"))),
NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Stmts"))),
NODE(Term, 1, STR("name.var")),
NODE(Term, 1, STR("kw.var"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("VarDecl"), LIST(NODE(Capture, 1, STR("$2")))))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Stmts"))),
NODE(Term, 1, STR("space.eol"))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$2")))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("EPSILON")))), LIST())),
NODE(PegRule, 2, STR("Callback"), NODE(SeqRule, 2, LIST(NODE(Term, 1, STR("end.code")),
NODE(Term, 1, NODE(RefRule, 1, STR("Stmts"))),
NODE(Term, 1, STR("begin.code"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Callback"), LIST(NODE(Capture, 1, STR("$2"))))))))))),
NODE(Peg, 2, STR("Peg"), LIST(NODE(PegRule, 2, STR("Unit"), NODE(Branch, 4, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 1, STR("name.token"))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))), LIST(NODE(Term, 1, STR("name.rule"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("RefRule"), LIST(NODE(Capture, 1, STR("$1"))))))))),
NODE(PegRule, 2, STR("Term"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 1, STR("op.maybe")),
NODE(Term, 1, NODE(RefRule, 1, STR("Unit")))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("TermMaybe"), LIST(NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, STR("op.star")),
NODE(Term, 1, NODE(RefRule, 1, STR("Unit")))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("TermStar"), LIST(NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, STR("op.plus")),
NODE(Term, 1, NODE(RefRule, 1, STR("Unit")))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("TermPlus"), LIST(NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Unit")))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Term"), LIST(NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Unit"))),
NODE(Term, 1, STR("op.lookahead"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Lookahead"), LIST(NODE(Capture, 1, STR("$2")))))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Unit"))),
NODE(Term, 1, STR("op.neg-lookahead"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("NegLoookahead"), LIST(NODE(Capture, 1, STR("$2"))))))))),
NODE(PegRule, 2, STR("SeqRule"), NODE(SeqRule, 2, LIST(NODE(TermMaybe, 1, NODE(RefRule, 1, STR("PureCallback"))),
NODE(TermPlus, 1, NODE(RefRule, 1, STR("Term")))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("SeqRule"), LIST(NODE(Capture, 1, STR("$2")),
NODE(Capture, 1, STR("$1"))))))))),
NODE(PegRule, 2, STR("RuleBody"), NODE(Branch, 4, STR("/*"), NODE(SeqRule, 2, LIST(NODE(Term, 1, NODE(RefRule, 1, STR("SeqRule")))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))), LIST(NODE(TermMaybe, 1, NODE(RefRule, 1, STR("PureCallback"))),
NODE(TermStar, 1, NODE(RefRule, 1, STR("Term"))),
NODE(Term, 1, STR("op.branch")),
NODE(TermMaybe, 1, STR("space.eol"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Branch"), LIST(NODE(Capture, 1, STR("$5")),
NODE(Capture, 1, STR("$4")),
NODE(Capture, 1, STR("$1")),
NODE(Capture, 1, STR("$3"))))))))),
NODE(PegRule, 2, STR("Rule"), NODE(Branch, 4, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 1, STR("space.eol")),
NODE(Term, 1, NODE(RefRule, 1, STR("RuleBody"))),
NODE(TermMaybe, 1, STR("space.eol")),
NODE(Term, 1, STR("op.def")),
NODE(Term, 1, STR("name.rule"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("PegRule"), LIST(NODE(Capture, 1, STR("$4")),
NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, STR("space.eol"))), LIST())),
NODE(PegRule, 2, STR("Peg"), NODE(SeqRule, 2, LIST(NODE(Term, 1, STR("end.peg")),
NODE(TermStar, 1, NODE(RefRule, 1, STR("Rule"))),
NODE(Term, 1, STR("begin.peg"))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$2"))))))))),
NODE(Peg, 2, STR("Lex"), LIST(NODE(PegRule, 2, STR("Pattern"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 1, NODE(RefRule, 1, STR("String")))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Regexp")))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))), LIST(NODE(Term, 1, STR("name.var"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("VarRef"), LIST(NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, STR("name.var.global"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("GlobalVarRef"), LIST(NODE(Capture, 1, STR("$1"))))))))),
NODE(PegRule, 2, STR("Rule"), NODE(SeqRule, 2, LIST(NODE(TermMaybe, 1, NODE(RefRule, 1, STR("Callback"))),
NODE(TermStar, 1, STR("space.pre-callback")),
NODE(Term, 1, NODE(RefRule, 1, STR("Pattern")))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("LexRule"), LIST(NODE(Capture, 1, STR("$3")),
NODE(Capture, 1, STR("$1"))))))))),
NODE(PegRule, 2, STR("RuleLine"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 1, STR("name.context.partial"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("RefPartialContext"), LIST(NODE(Capture, 1, STR("$1")))))))), LIST(NODE(Term, 1, STR("name.context"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("RefContext"), LIST(NODE(Capture, 1, STR("$1")))))))), LIST(NODE(TermPlus, 1, NODE(RefRule, 1, STR("Rule")))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("SeqLexRules"), LIST(NODE(Capture, 1, STR("$1")))))))), LIST(NODE(TermPlus, 1, NODE(RefRule, 1, STR("Rule"))),
NODE(TermMaybe, 1, NODE(RefRule, 1, STR("Callback"))),
NODE(Term, 1, STR("kw.begin"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("BeginCallback"), LIST(NODE(Capture, 1, STR("$3")),
NODE(Capture, 1, STR("$2")))))))), LIST(NODE(TermPlus, 1, NODE(RefRule, 1, STR("Rule"))),
NODE(Term, 1, NODE(RefRule, 1, STR("Callback"))),
NODE(Term, 1, STR("kw.end"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("EndCallback"), LIST(NODE(Capture, 1, STR("$3")),
NODE(Capture, 1, STR("$2")))))))), LIST(NODE(Term, 1, STR("space.eol"))), LIST())),
NODE(PegRule, 2, STR("Lex"), NODE(SeqRule, 2, LIST(NODE(Term, 1, STR("end.lex")),
NODE(TermStar, 1, NODE(RefRule, 1, STR("RuleLine"))),
NODE(Term, 1, STR("begin.lex"))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$2"))))))))),
NODE(Peg, 2, STR("Main"), LIST(NODE(PegRule, 2, STR("Pattern"), NODE(Branch, 4, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 1, NODE(RefRule, 1, STR("String")))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Regexp")))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1"))))))),
NODE(PegRule, 2, STR("Ins"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(Branch, 4, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Pattern"))),
NODE(Term, 1, STR("op.eq")),
NODE(Term, 1, STR("space.pre-eq")),
NODE(Term, 1, STR("name.pattern")),
NODE(Term, 1, STR("kw.pattern"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("PatternIns"), LIST(NODE(Capture, 1, STR("$5")),
NODE(Capture, 1, STR("$2")))))))), LIST(NODE(Term, 1, STR("name.var.global")),
NODE(Term, 1, STR("kw.var"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("VarDecl"), LIST(NODE(Capture, 1, STR("$2")))))))), LIST(NODE(TermStar, 1, STR("name.arg")),
NODE(Term, 1, STR("name.struct")),
NODE(Term, 1, STR("kw.struct"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("StructIns"), LIST(NODE(Capture, 1, STR("$3")),
NODE(Capture, 1, STR("$2")))))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Lex"))),
NODE(Term, 1, STR("name.context")),
NODE(Term, 1, STR("kw.lex"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Lex"), LIST(NODE(Capture, 1, STR("$3")),
NODE(Capture, 1, STR("$2")))))))), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Peg"))),
NODE(Term, 1, STR("name.context")),
NODE(Term, 1, STR("kw.peg"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Peg"), LIST(NODE(Capture, 1, STR("$3")),
NODE(Capture, 1, STR("$2"))))))))),
NODE(PegRule, 2, STR("Line"), NODE(Branch, 4, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 1, STR("space.eol"))), LIST()), LIST(NODE(Term, 1, NODE(RefRule, 1, STR("Ins")))), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1"))))))),
NODE(PegRule, 2, STR("Main"), NODE(SeqRule, 2, LIST(NODE(TermStar, 1, NODE(RefRule, 1, STR("Line")))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Main"), LIST(NODE(Capture, 1, STR("$1"))))))))))),
NODE(Lex, 2, STR("*Spaces"), LIST(NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, VAL_FROM_INT(32), STR("+")))))), LIST(NODE(Callback, 1, LIST()))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(PredefAnchor, 1, STR("\\z")))),
NODE(Seq, 1, LIST(VAL_FROM_INT(10))))),
NODE(Quantified, 2, NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(BracketCharGroup, 2, STR("[^"), LIST(NODE(CharRange, 2, VAL_FROM_INT(10), VAL_FROM_INT(10)))), STR("*")),
VAL_FROM_INT(35))))), STR("?")),
NODE(Quantified, 2, VAL_FROM_INT(32), STR("*")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":style"), LIST(VAL_FROM_INT(1),
STR("comment"))),
NODE(Call, 2, STR(":token"), LIST(STR("space.eol"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Group, 2, STR("?="), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(61))))),
NODE(Quantified, 2, VAL_FROM_INT(32), STR("+")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("space.pre-eq"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Group, 2, STR("?="), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(123))))),
NODE(Quantified, 2, VAL_FROM_INT(32), STR("+")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("space.pre-callback"))))))))))),
NODE(Lex, 2, STR("*RegexpQuantifier"), LIST(NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(63), VAL_FROM_INT(63)),
NODE(CharRange, 2, VAL_FROM_INT(43), VAL_FROM_INT(43)))), STR("?")))))),
VAL_FROM_INT(32),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(125))))),
VAL_FROM_INT(32),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\s")), STR("*")),
VAL_FROM_INT(32),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\d")), STR("*")))))),
VAL_FROM_INT(32),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\s")), STR("*")),
VAL_FROM_INT(44),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\s")), STR("*")),
VAL_FROM_INT(32),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\d")), STR("+")))))),
VAL_FROM_INT(32),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\s")), STR("*")),
VAL_FROM_INT(32),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(123))))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(VAL_FROM_INT(5),
STR("quantifier.kind"))),
NODE(Call, 2, STR(":token"), LIST(VAL_FROM_INT(4),
STR("end.quantifier"))),
NODE(Call, 2, STR(":token"), LIST(VAL_FROM_INT(3),
STR("quantifier.range.to"))),
NODE(Call, 2, STR(":token"), LIST(VAL_FROM_INT(2),
STR("quantifier.range.from"))),
NODE(Call, 2, STR(":token"), LIST(VAL_FROM_INT(1),
STR("begin.quantifier"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(63), VAL_FROM_INT(63)),
NODE(CharRange, 2, VAL_FROM_INT(43), VAL_FROM_INT(43)))), STR("?")))))),
VAL_FROM_INT(32),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(125))))),
VAL_FROM_INT(32),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\s")), STR("*")),
VAL_FROM_INT(32),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\d")), STR("+")))))),
VAL_FROM_INT(32),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\s")), STR("*")),
VAL_FROM_INT(32),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(123))))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(VAL_FROM_INT(4),
STR("quantifier.kind"))),
NODE(Call, 2, STR(":token"), LIST(VAL_FROM_INT(3),
STR("end.quantifier"))),
NODE(Call, 2, STR(":token"), LIST(VAL_FROM_INT(2),
STR("quantifier.range.from"))),
NODE(Call, 2, STR(":token"), LIST(VAL_FROM_INT(1),
STR("begin.quantifier"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(42))),
NODE(Seq, 1, LIST(VAL_FROM_INT(32),
VAL_FROM_INT(63),
VAL_FROM_INT(42))),
NODE(Seq, 1, LIST(VAL_FROM_INT(32),
VAL_FROM_INT(43),
VAL_FROM_INT(42))),
NODE(Seq, 1, LIST(VAL_FROM_INT(32),
VAL_FROM_INT(43))),
NODE(Seq, 1, LIST(VAL_FROM_INT(32),
VAL_FROM_INT(63),
VAL_FROM_INT(43))),
NODE(Seq, 1, LIST(VAL_FROM_INT(32),
VAL_FROM_INT(43),
VAL_FROM_INT(43))),
NODE(Seq, 1, LIST(VAL_FROM_INT(32),
VAL_FROM_INT(63))),
NODE(Seq, 1, LIST(VAL_FROM_INT(32),
VAL_FROM_INT(63),
VAL_FROM_INT(63))),
NODE(Seq, 1, LIST(VAL_FROM_INT(32),
VAL_FROM_INT(43),
VAL_FROM_INT(63))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("quantifier"))))))))))),
NODE(Lex, 2, STR("RegexpEscape"), LIST(NODE(EndCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(BracketCharGroup, 2, STR("[^"), LIST(NODE(CharRange, 2, VAL_FROM_INT(10), VAL_FROM_INT(10)))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":yield"), LIST(NODE(Call, 2, STR(":char_no_escape"), LIST(VAL_FROM_INT(0))))),
NODE(Call, 2, STR(":token"), LIST(STR("char.escape"))))))))),
NODE(EndCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(114), VAL_FROM_INT(114)),
NODE(CharRange, 2, VAL_FROM_INT(110), VAL_FROM_INT(110)),
NODE(CharRange, 2, VAL_FROM_INT(116), VAL_FROM_INT(116)),
NODE(CharRange, 2, VAL_FROM_INT(102), VAL_FROM_INT(102)),
NODE(CharRange, 2, VAL_FROM_INT(98), VAL_FROM_INT(98)),
NODE(CharRange, 2, VAL_FROM_INT(97), VAL_FROM_INT(97)))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":yield"), LIST(NODE(Call, 2, STR(":char_escape_sp"), LIST(VAL_FROM_INT(0))))),
NODE(Call, 2, STR(":token"), LIST(STR("char.escape"))))))))),
NODE(EndCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(CharGroupPredef, 1, STR("\\h")),
NODE(CharGroupPredef, 1, STR("\\h")),
NODE(CharGroupPredef, 1, STR("\\h")),
NODE(CharGroupPredef, 1, STR("\\h")))))),
VAL_FROM_INT(117))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":yield"), LIST(NODE(Call, 2, STR(":char_hex"), LIST(VAL_FROM_INT(1))))),
NODE(Call, 2, STR(":token"), LIST(STR("char.escape"))))))))),
NODE(EndCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(125),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\h")), STR("+")))))),
VAL_FROM_INT(123),
VAL_FROM_INT(117))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":yield"), LIST(NODE(Call, 2, STR(":char_hex"), LIST(VAL_FROM_INT(1))))),
NODE(Call, 2, STR(":token"), LIST(STR("char.escape"))))))))),
NODE(EndCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(CharGroupPredef, 1, STR("\\h")),
NODE(CharGroupPredef, 1, STR("\\h")))))),
VAL_FROM_INT(120))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":yield"), LIST(NODE(Call, 2, STR(":char_hex"), LIST(VAL_FROM_INT(1))))),
NODE(Call, 2, STR(":token"), LIST(STR("char.escape"))))))))),
NODE(BeginCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, STR("\\\\"), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("char.escape"))))))))))),
NODE(Lex, 2, STR("Regexp"), LIST(NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(BracketCharGroup, 2, STR("[^"), LIST(NODE(CharGroupPredef, 1, STR("\\s")),
NODE(CharRange, 2, VAL_FROM_INT(10), VAL_FROM_INT(10)))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(NODE(Call, 2, STR(":char_no_escape"), LIST(VAL_FROM_INT(0))),
VAL_FROM_INT(0),
STR("char"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\s")), STR("+")))))), LIST(NODE(Callback, 1, LIST()))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, STR(")"), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("end.group"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(62),
VAL_FROM_INT(63))),
NODE(Seq, 1, LIST(VAL_FROM_INT(33),
VAL_FROM_INT(60),
VAL_FROM_INT(63))),
NODE(Seq, 1, LIST(VAL_FROM_INT(61),
VAL_FROM_INT(60),
VAL_FROM_INT(63))),
NODE(Seq, 1, LIST(VAL_FROM_INT(33),
VAL_FROM_INT(63))),
NODE(Seq, 1, LIST(VAL_FROM_INT(61),
VAL_FROM_INT(63))),
NODE(Seq, 1, LIST(VAL_FROM_INT(58),
VAL_FROM_INT(63))))), STR("?")),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(40))))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(VAL_FROM_INT(2),
STR("group.special"))),
NODE(Call, 2, STR(":token"), LIST(VAL_FROM_INT(1),
STR("begin.group"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(41),
NODE(Quantified, 2, NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("+")),
VAL_FROM_INT(45))))), STR("?")),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("+")),
VAL_FROM_INT(58),
VAL_FROM_INT(101),
VAL_FROM_INT(63),
VAL_FROM_INT(40))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("flag.encoding"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, STR("(?I)"), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(VAL_FALSE,
VAL_FROM_INT(0),
STR("flag.case-sensitive"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, STR("(?i)"), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(VAL_TRUE,
VAL_FROM_INT(0),
STR("flag.case-insensitive"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(125),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(65), VAL_FROM_INT(90)))),
VAL_FROM_INT(123))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("interpolate.predef"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, STR("-"), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(NODE(Call, 2, STR(":char_no_escape"), LIST(VAL_FROM_INT(0))),
VAL_FROM_INT(0),
STR("op.minus"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, STR("]"), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("end.char-group"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, STR("["), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(VAL_TRUE,
VAL_FROM_INT(0),
STR("begin.char-group"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, STR("[^"), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(VAL_FALSE,
VAL_FROM_INT(0),
STR("begin.char-group"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, STR("|"), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.branch"))))))))),
NODE(RefPartialContext, 1, STR("*RegexpQuantifier")),
NODE(SeqLexRules, 1, LIST(NODE(RefContext, 1, STR("RegexpEscape")))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(125),
NODE(Quantified, 2, NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(97), VAL_FROM_INT(122)))), STR("*")),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(65), VAL_FROM_INT(90)))),
VAL_FROM_INT(123),
VAL_FROM_INT(112),
VAL_FROM_INT(92))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("unicode-char-class"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(46))),
NODE(Seq, 1, LIST(NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(83), VAL_FROM_INT(83)),
NODE(CharRange, 2, VAL_FROM_INT(115), VAL_FROM_INT(115)),
NODE(CharRange, 2, VAL_FROM_INT(72), VAL_FROM_INT(72)),
NODE(CharRange, 2, VAL_FROM_INT(104), VAL_FROM_INT(104)),
NODE(CharRange, 2, VAL_FROM_INT(87), VAL_FROM_INT(87)),
NODE(CharRange, 2, VAL_FROM_INT(119), VAL_FROM_INT(119)),
NODE(CharRange, 2, VAL_FROM_INT(68), VAL_FROM_INT(68)),
NODE(CharRange, 2, VAL_FROM_INT(100), VAL_FROM_INT(100)))),
VAL_FROM_INT(92))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("char-group.predef"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(90), VAL_FROM_INT(90)),
NODE(CharRange, 2, VAL_FROM_INT(122), VAL_FROM_INT(122)),
NODE(CharRange, 2, VAL_FROM_INT(65), VAL_FROM_INT(65)),
NODE(CharRange, 2, VAL_FROM_INT(97), VAL_FROM_INT(97)),
NODE(CharRange, 2, VAL_FROM_INT(66), VAL_FROM_INT(66)),
NODE(CharRange, 2, VAL_FROM_INT(98), VAL_FROM_INT(98)))),
VAL_FROM_INT(92))),
NODE(Seq, 1, LIST(VAL_FROM_INT(36))),
NODE(Seq, 1, LIST(VAL_FROM_INT(94))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("anchor"))))))))),
NODE(EndCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, STR("/"), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":peg"), LIST(STR("Regexp"))),
NODE(Call, 2, STR(":token"), LIST(STR("end.regexp"))))))))),
NODE(BeginCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, STR("/"), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("begin.regexp"))))))))))),
NODE(Lex, 2, STR("String"), LIST(NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(CharGroupPredef, 1, STR(".")))))), LIST(NODE(Callback, 1, LIST(NODE(Assign, 2, STR("buf"), NODE(Call, 2, STR(":concat_char"), LIST(NODE(Call, 2, STR(":char_no_escape"), LIST(VAL_FROM_INT(0))),
NODE(VarRef, 1, STR("buf"))))),
NODE(Call, 2, STR(":token"), LIST(STR("char"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(BracketCharGroup, 2, STR("[^"), LIST(NODE(CharRange, 2, VAL_FROM_INT(10), VAL_FROM_INT(10)))))))),
VAL_FROM_INT(92))))), LIST(NODE(Callback, 1, LIST(NODE(Assign, 2, STR("buf"), NODE(Call, 2, STR(":concat_char"), LIST(NODE(Call, 2, STR(":char_no_escape"), LIST(VAL_FROM_INT(1))),
NODE(VarRef, 1, STR("buf"))))),
NODE(Call, 2, STR(":token"), LIST(STR("char.escape"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(114), VAL_FROM_INT(114)),
NODE(CharRange, 2, VAL_FROM_INT(110), VAL_FROM_INT(110)),
NODE(CharRange, 2, VAL_FROM_INT(116), VAL_FROM_INT(116)),
NODE(CharRange, 2, VAL_FROM_INT(102), VAL_FROM_INT(102)),
NODE(CharRange, 2, VAL_FROM_INT(98), VAL_FROM_INT(98)),
NODE(CharRange, 2, VAL_FROM_INT(97), VAL_FROM_INT(97)))))))),
VAL_FROM_INT(92))))), LIST(NODE(Callback, 1, LIST(NODE(Assign, 2, STR("buf"), NODE(Call, 2, STR(":concat_char"), LIST(NODE(Call, 2, STR(":char_escape_sp"), LIST(VAL_FROM_INT(1))),
NODE(VarRef, 1, STR("buf"))))),
NODE(Call, 2, STR(":token"), LIST(STR("char.escape.sp"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(CharGroupPredef, 1, STR("\\h")),
NODE(CharGroupPredef, 1, STR("\\h")),
NODE(CharGroupPredef, 1, STR("\\h")),
NODE(CharGroupPredef, 1, STR("\\h")))))),
VAL_FROM_INT(117),
VAL_FROM_INT(92))))), LIST(NODE(Callback, 1, LIST(NODE(Assign, 2, STR("buf"), NODE(Call, 2, STR(":concat_char"), LIST(NODE(Call, 2, STR(":char_hex"), LIST(VAL_FROM_INT(1))),
NODE(VarRef, 1, STR("buf"))))),
NODE(Call, 2, STR(":token"), LIST(STR("char.u4"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(125),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\h")), STR("+")))))),
VAL_FROM_INT(123),
VAL_FROM_INT(117),
VAL_FROM_INT(92))))), LIST(NODE(Callback, 1, LIST(NODE(Assign, 2, STR("buf"), NODE(Call, 2, STR(":concat_char"), LIST(NODE(Call, 2, STR(":char_hex"), LIST(VAL_FROM_INT(1))),
NODE(VarRef, 1, STR("buf"))))),
NODE(Call, 2, STR(":token"), LIST(STR("char.ux"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(CharGroupPredef, 1, STR("\\h")),
NODE(CharGroupPredef, 1, STR("\\h")))))),
VAL_FROM_INT(120),
VAL_FROM_INT(92))))), LIST(NODE(Callback, 1, LIST(NODE(Assign, 2, STR("buf"), NODE(Call, 2, STR(":concat_char"), LIST(NODE(Call, 2, STR(":char_hex"), LIST(VAL_FROM_INT(1))),
NODE(VarRef, 1, STR("buf"))))),
NODE(Call, 2, STR(":token"), LIST(STR("char.hex"))))))))),
NODE(EndCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(34))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":yield"), LIST(NODE(VarRef, 1, STR("buf")))),
NODE(Call, 2, STR(":token"), LIST(STR("end.string"))))))))),
NODE(BeginCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(34))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("begin.string"))),
NODE(Assign, 2, STR("buf"), STR("")),
NODE(VarDecl, 1, STR("buf")))))))))),
NODE(Lex, 2, STR("Callback"), LIST(NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, STR("="), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.eq"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(64), VAL_FROM_INT(64)),
NODE(CharRange, 2, VAL_FROM_INT(37), VAL_FROM_INT(37)),
NODE(CharRange, 2, VAL_FROM_INT(33), VAL_FROM_INT(33)),
NODE(CharRange, 2, VAL_FROM_INT(61), VAL_FROM_INT(61)),
NODE(CharRange, 2, VAL_FROM_INT(62), VAL_FROM_INT(62)),
NODE(CharRange, 2, VAL_FROM_INT(60), VAL_FROM_INT(60)),
NODE(CharRange, 2, VAL_FROM_INT(124), VAL_FROM_INT(124)),
NODE(CharRange, 2, VAL_FROM_INT(38), VAL_FROM_INT(38)),
NODE(CharRange, 2, VAL_FROM_INT(94), VAL_FROM_INT(94)),
NODE(CharRange, 2, VAL_FROM_INT(47), VAL_FROM_INT(47)),
NODE(CharRange, 2, VAL_FROM_INT(42), VAL_FROM_INT(42)),
NODE(CharRange, 2, VAL_FROM_INT(45), VAL_FROM_INT(45)),
NODE(CharRange, 2, VAL_FROM_INT(43), VAL_FROM_INT(43)),
NODE(CharGroupPredef, 1, STR("\\w")))), STR("+")),
VAL_FROM_INT(58))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.func"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(97), VAL_FROM_INT(122)))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.var"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(97), VAL_FROM_INT(122)))),
VAL_FROM_INT(36))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.var.global"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(PredefAnchor, 1, STR("\\b")),
VAL_FROM_INT(114),
VAL_FROM_INT(97),
VAL_FROM_INT(118))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("kw.var"))))))))),
NODE(RefPartialContext, 1, STR("*PureCallback")))),
NODE(Lex, 2, STR("PureCallback"), LIST(NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, VAL_FROM_INT(32), STR("+")))))), LIST(NODE(Callback, 1, LIST()))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Group, 2, STR("?="), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(61))))),
NODE(Quantified, 2, VAL_FROM_INT(32), STR("+")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("space.pre-eq"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(BracketCharGroup, 2, STR("[^"), LIST(NODE(CharRange, 2, VAL_FROM_INT(10), VAL_FROM_INT(10)))), STR("*")),
VAL_FROM_INT(35))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":style"), LIST(STR("comment"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(10), VAL_FROM_INT(10)),
NODE(CharRange, 2, VAL_FROM_INT(44), VAL_FROM_INT(44)))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("space.eol"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(42))))),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\s")), STR("*")),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(44))))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(VAL_FROM_INT(2),
STR("op.prefix.splat"))),
NODE(Call, 2, STR(":token"), LIST(VAL_FROM_INT(1),
STR("space.eol"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, STR("!"), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.prefix"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, STR(")"), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("end.paren"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, STR("("), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("begin.paren"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, STR("]"), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("end.list"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, STR("["), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("begin.list"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(42))))),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\s")), STR("*")),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(91))))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(VAL_FROM_INT(2),
STR("op.prefix.splat"))),
NODE(Call, 2, STR(":token"), LIST(VAL_FROM_INT(1),
STR("begin.list"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(64))),
NODE(Seq, 1, LIST(VAL_FROM_INT(37))),
NODE(Seq, 1, LIST(VAL_FROM_INT(47))),
NODE(Seq, 1, LIST(VAL_FROM_INT(42))),
NODE(Seq, 1, LIST(VAL_FROM_INT(42),
VAL_FROM_INT(42))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.infix.multitive"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(124))),
NODE(Seq, 1, LIST(VAL_FROM_INT(38))),
NODE(Seq, 1, LIST(VAL_FROM_INT(94))),
NODE(Seq, 1, LIST(VAL_FROM_INT(45))),
NODE(Seq, 1, LIST(VAL_FROM_INT(43))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.infix.additive"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(61),
VAL_FROM_INT(33))),
NODE(Seq, 1, LIST(VAL_FROM_INT(61),
VAL_FROM_INT(61))),
NODE(Seq, 1, LIST(VAL_FROM_INT(61),
VAL_FROM_INT(60))),
NODE(Seq, 1, LIST(VAL_FROM_INT(61),
VAL_FROM_INT(62))),
NODE(Seq, 1, LIST(VAL_FROM_INT(60))),
NODE(Seq, 1, LIST(VAL_FROM_INT(62))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.infix.compare"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(124),
VAL_FROM_INT(124))),
NODE(Seq, 1, LIST(VAL_FROM_INT(38),
VAL_FROM_INT(38))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.infix.logic"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\d")), STR("+")),
NODE(Quantified, 2, VAL_FROM_INT(45), STR("?")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(NODE(Call, 2, STR(":parse_int"), LIST(VAL_FROM_INT(0))),
VAL_FROM_INT(0),
STR("lit.int"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(10),
VAL_FROM_INT(101),
VAL_FROM_INT(115),
VAL_FROM_INT(108),
VAL_FROM_INT(97),
VAL_FROM_INT(102))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(VAL_FALSE,
VAL_FROM_INT(0),
STR("lit.const"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(10),
VAL_FROM_INT(101),
VAL_FROM_INT(117),
VAL_FROM_INT(114),
VAL_FROM_INT(116))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(VAL_TRUE,
VAL_FROM_INT(0),
STR("lit.true"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(PredefAnchor, 1, STR("\\b")),
VAL_FROM_INT(108),
VAL_FROM_INT(105),
VAL_FROM_INT(110))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(VAL_NIL,
VAL_FROM_INT(0),
STR("lit.nil"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(PredefAnchor, 1, STR("\\b")),
VAL_FROM_INT(100),
VAL_FROM_INT(110),
VAL_FROM_INT(101))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("kw.end"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(10),
VAL_FROM_INT(101),
VAL_FROM_INT(115),
VAL_FROM_INT(108),
VAL_FROM_INT(101))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("kw.else"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(PredefAnchor, 1, STR("\\b")),
VAL_FROM_INT(102),
VAL_FROM_INT(105))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("kw.if"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(65), VAL_FROM_INT(90)))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.type"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("+")),
NODE(CharGroupPredef, 1, STR(".")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.method"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\d")), STR("+")),
NODE(Quantified, 2, VAL_FROM_INT(45), STR("?")),
VAL_FROM_INT(36))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.var.capture"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(RefContext, 1, STR("String")))),
NODE(EndCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, STR("}"), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":peg"), LIST(STR("Callback"))),
NODE(Call, 2, STR(":token"), LIST(STR("end.code"))))))))),
NODE(BeginCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, STR("{"), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("begin.code"))))))))))),
NODE(Lex, 2, STR("Peg"), LIST(NODE(RefPartialContext, 1, STR("*Spaces")),
NODE(SeqLexRules, 1, LIST(NODE(RefContext, 1, STR("Callback")))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, STR("!"), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.neg-lookahead"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, STR("&"), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.lookahead"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("+")),
NODE(PredefAnchor, 1, STR("$")),
VAL_FROM_INT(47))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.branch"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(43), VAL_FROM_INT(43)),
NODE(CharRange, 2, VAL_FROM_INT(63), VAL_FROM_INT(63)),
NODE(CharRange, 2, VAL_FROM_INT(42), VAL_FROM_INT(42)))), STR("?")),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(47), VAL_FROM_INT(47)))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.branch"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, STR("*"), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.star"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, STR("+"), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.plus"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, STR("?"), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.maybe"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, STR(":"), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.def"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("+")),
VAL_FROM_INT(45))))), STR("*")),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("+")),
VAL_FROM_INT(46))))), STR("*")),
NODE(Quantified, 2, NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("+")),
VAL_FROM_INT(45))))), STR("*")),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(97), VAL_FROM_INT(122)))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.token"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("+")),
VAL_FROM_INT(46))))), STR("*")),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(65), VAL_FROM_INT(90)))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.rule"))))))))),
NODE(EndCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, STR("]"), LIST(NODE(Callback, 1, LIST(STR("Peg"),
NODE(VarRef, 1, STR("peg")),
NODE(Call, 2, STR(":token"), LIST(STR("end.peg"))))))))),
NODE(BeginCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, STR("["), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("begin.peg"))))))))))),
NODE(Lex, 2, STR("Lex"), LIST(NODE(RefPartialContext, 1, STR("*Spaces")),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(97), VAL_FROM_INT(122)))),
NODE(PredefAnchor, 1, STR("$")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.var.global"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(97), VAL_FROM_INT(122)))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.var"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(65), VAL_FROM_INT(90)))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.context"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(65), VAL_FROM_INT(90)))),
VAL_FROM_INT(42))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.context.partial"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(PredefAnchor, 1, STR("\\b")),
VAL_FROM_INT(100),
VAL_FROM_INT(110),
VAL_FROM_INT(101))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("kw.end"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(PredefAnchor, 1, STR("\\b")),
VAL_FROM_INT(110),
VAL_FROM_INT(105),
VAL_FROM_INT(103),
VAL_FROM_INT(101),
VAL_FROM_INT(98))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("kw.begin"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(RefContext, 1, STR("Callback")))),
NODE(SeqLexRules, 1, LIST(NODE(RefContext, 1, STR("String")))),
NODE(SeqLexRules, 1, LIST(NODE(RefContext, 1, STR("Regexp")))),
NODE(EndCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, STR("]"), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":peg"), LIST(STR("Lex"))),
NODE(Call, 2, STR(":token"), LIST(STR("end.lex"))))))))),
NODE(BeginCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, STR("["), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("begin.lex"))))))))))),
NODE(Lex, 2, STR("StructIns"), LIST(NODE(RefPartialContext, 1, STR("*Spaces")),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(97), VAL_FROM_INT(122)))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.arg"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(44),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\s")), STR("*")),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(97), VAL_FROM_INT(122)))))))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(VAL_FROM_INT(1),
STR("name.arg"))))))))),
NODE(EndCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, STR("]"), LIST(NODE(Callback, 1, LIST()))))),
NODE(BeginCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, STR("["), LIST(NODE(Callback, 1, LIST()))))))),
NODE(Lex, 2, STR("Main"), LIST(NODE(RefPartialContext, 1, STR("*Spaces")),
NODE(SeqLexRules, 1, LIST(NODE(RefContext, 1, STR("Regexp")))),
NODE(SeqLexRules, 1, LIST(NODE(RefContext, 1, STR("String")))),
NODE(SeqLexRules, 1, LIST(NODE(RefContext, 1, STR("Peg")),
NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(65), VAL_FROM_INT(90)))))))),
NODE(Quantified, 2, VAL_FROM_INT(32), STR("+")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(VAL_FROM_INT(1),
STR("name.context"))))))),
NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(PredefAnchor, 1, STR("\\b")),
VAL_FROM_INT(103),
VAL_FROM_INT(101),
VAL_FROM_INT(112))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("kw.peg"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(RefContext, 1, STR("Lex")),
NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(65), VAL_FROM_INT(90)))),
NODE(Quantified, 2, VAL_FROM_INT(42), STR("?")))))),
NODE(Quantified, 2, VAL_FROM_INT(32), STR("+")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(VAL_FROM_INT(1),
STR("name.context"))))))),
NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(PredefAnchor, 1, STR("\\b")),
VAL_FROM_INT(120),
VAL_FROM_INT(101),
VAL_FROM_INT(108))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("kw.lex"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(RefContext, 1, STR("StructIns")),
NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(65), VAL_FROM_INT(90)))))))),
NODE(Quantified, 2, VAL_FROM_INT(32), STR("+")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(VAL_FROM_INT(1),
STR("name.struct"))))))),
NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(PredefAnchor, 1, STR("\\b")),
VAL_FROM_INT(116),
VAL_FROM_INT(99),
VAL_FROM_INT(117),
VAL_FROM_INT(114),
VAL_FROM_INT(116),
VAL_FROM_INT(115))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("kw.struct"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(97), VAL_FROM_INT(122)))),
VAL_FROM_INT(36))))),
NODE(Quantified, 2, VAL_FROM_INT(32), STR("+")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(VAL_FROM_INT(1),
STR("name.var.global"))))))),
NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(PredefAnchor, 1, STR("\\b")),
VAL_FROM_INT(114),
VAL_FROM_INT(97),
VAL_FROM_INT(118))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("kw.var"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(32),
VAL_FROM_INT(61),
NODE(Quantified, 2, VAL_FROM_INT(32), STR("*")))))), LIST()),
NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("+")),
VAL_FROM_INT(64))))),
NODE(Quantified, 2, VAL_FROM_INT(32), STR("+")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(VAL_FROM_INT(1),
STR("name.pattern"))))))),
NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(PredefAnchor, 1, STR("\\b")),
VAL_FROM_INT(110),
VAL_FROM_INT(114),
VAL_FROM_INT(101),
VAL_FROM_INT(116),
VAL_FROM_INT(116),
VAL_FROM_INT(97),
VAL_FROM_INT(112))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("kw.pattern"))))))))),
NODE(EndCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(PredefAnchor, 1, STR("\\z")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":peg"), LIST(STR("Main"))))))))))),
NODE(StructIns, 2, STR("CharRange"), LIST(STR("to"),
STR("from"))),
NODE(StructIns, 2, STR("BracketCharGroup"), LIST(STR("char_classes"),
STR("beg_tok"))),
NODE(StructIns, 2, STR("UnicodeCharClass"), LIST(STR("name"))),
NODE(StructIns, 2, STR("CharGroupPredef"), LIST(STR("tok"))),
NODE(StructIns, 2, STR("Group"), LIST(STR("branches"),
STR("special"))),
NODE(StructIns, 2, STR("PredefInterpolate"), LIST(STR("pattern_name"))),
NODE(StructIns, 2, STR("QuantifiedRange"), LIST(STR("kind"),
STR("to_maybe"),
STR("from"),
STR("unit"))),
NODE(StructIns, 2, STR("Quantified"), LIST(STR("quantifier"),
STR("unit"))),
NODE(StructIns, 2, STR("Flag"), LIST(STR("flag"))),
NODE(StructIns, 2, STR("PredefAnchor"), LIST(STR("anchor"))),
NODE(StructIns, 2, STR("Seq"), LIST(STR("seq"))),
NODE(StructIns, 2, STR("Regexp"), LIST(STR("reg"))),
NODE(StructIns, 2, STR("If"), LIST(STR("false_lines"),
STR("true_lines"),
STR("expr"))),
NODE(StructIns, 2, STR("SplatEntry"), LIST(STR("expr"))),
NODE(StructIns, 2, STR("Assign"), LIST(STR("expr"),
STR("var_name"))),
NODE(StructIns, 2, STR("CreateList"), LIST(STR("elems"))),
NODE(StructIns, 2, STR("CreateNode"), LIST(STR("elems"),
STR("ty"))),
NODE(StructIns, 2, STR("Capture"), LIST(STR("var_name"))),
NODE(StructIns, 2, STR("Call"), LIST(STR("args"),
STR("func_name"))),
NODE(StructIns, 2, STR("InfixLogic"), LIST(STR("rhs"),
STR("op"),
STR("lhs"))),
NODE(StructIns, 2, STR("Callback"), LIST(STR("stmts"))),
NODE(StructIns, 2, STR("RefRule"), LIST(STR("name"))),
NODE(StructIns, 2, STR("NegLoookahead"), LIST(STR("unit"))),
NODE(StructIns, 2, STR("Lookahead"), LIST(STR("unit"))),
NODE(StructIns, 2, STR("Term"), LIST(STR("unit"))),
NODE(StructIns, 2, STR("TermPlus"), LIST(STR("unit"))),
NODE(StructIns, 2, STR("TermStar"), LIST(STR("unit"))),
NODE(StructIns, 2, STR("TermMaybe"), LIST(STR("unit"))),
NODE(StructIns, 2, STR("SeqRule"), LIST(STR("code"),
STR("terms"))),
NODE(StructIns, 2, STR("Branch"), LIST(STR("code"),
STR("rhs_terms"),
STR("lhs"),
STR("op"))),
NODE(StructIns, 2, STR("PegRule"), LIST(STR("body"),
STR("name"))),
NODE(StructIns, 2, STR("GlobalVarRef"), LIST(STR("name"))),
NODE(StructIns, 2, STR("VarRef"), LIST(STR("var_name"))),
NODE(StructIns, 2, STR("LexRule"), LIST(STR("code"),
STR("pattern"))),
NODE(StructIns, 2, STR("EndCallback"), LIST(STR("rules"),
STR("first_cb"))),
NODE(StructIns, 2, STR("BeginCallback"), LIST(STR("rules"),
STR("first_cb"))),
NODE(StructIns, 2, STR("SeqLexRules"), LIST(STR("rules"))),
NODE(StructIns, 2, STR("RefContext"), LIST(STR("name"))),
NODE(StructIns, 2, STR("RefPartialContext"), LIST(STR("name"))),
NODE(StructIns, 2, STR("Peg"), LIST(STR("rules"),
STR("context"))),
NODE(StructIns, 2, STR("Lex"), LIST(STR("rules"),
STR("context"))),
NODE(StructIns, 2, STR("VarDecl"), LIST(STR("var_name"))),
NODE(StructIns, 2, STR("StructIns"), LIST(STR("args"),
STR("name"))),
NODE(StructIns, 2, STR("PatternIns"), LIST(STR("pattern"),
STR("name"))),
NODE(StructIns, 2, STR("Main"), LIST(STR("ins")))));
