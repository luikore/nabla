// GENERATED BY mini-sb.rb WITH sb.sb

return NODE(Main, 1, LIST(NODE(Lex, 2, STR("Main"), LIST(NODE(EndCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(PredefAnchor, 1, STR("\\z")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":parse"), LIST()))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(112),
VAL_FROM_INT(97),
VAL_FROM_INT(116),
VAL_FROM_INT(116),
VAL_FROM_INT(101),
VAL_FROM_INT(114),
VAL_FROM_INT(110),
NODE(PredefAnchor, 1, STR("\\b")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("kw.pattern"))))))),
NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, VAL_FROM_INT(32), STR("+")),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(64),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("+")))))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.pattern"),
VAL_FROM_INT(1))))))),
NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, VAL_FROM_INT(32), STR("*")),
VAL_FROM_INT(61),
VAL_FROM_INT(32))))), LIST()))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(118),
VAL_FROM_INT(97),
VAL_FROM_INT(114),
NODE(PredefAnchor, 1, STR("\\b")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("kw.var"))))))),
NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, VAL_FROM_INT(32), STR("+")),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(97), VAL_FROM_INT(122)))),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")))))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.var"),
VAL_FROM_INT(1))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(108),
VAL_FROM_INT(101),
VAL_FROM_INT(120),
NODE(PredefAnchor, 1, STR("\\b")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("kw.lex"))))))),
NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, VAL_FROM_INT(32), STR("+")),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, VAL_FROM_INT(42), STR("?")),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(65), VAL_FROM_INT(90)))),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")))))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.context"),
VAL_FROM_INT(1))))))),
NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, VAL_FROM_INT(32), STR("*")),
VAL_FROM_INT(61),
VAL_FROM_INT(32))))), LIST()),
NODE(RefContext, 1, STR("Lex")))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(112),
VAL_FROM_INT(101),
VAL_FROM_INT(103),
NODE(PredefAnchor, 1, STR("\\b")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("kw.peg"))))))),
NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, VAL_FROM_INT(32), STR("+")),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(65), VAL_FROM_INT(90)))),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")))))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.context"),
VAL_FROM_INT(1))))))),
NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, VAL_FROM_INT(32), STR("*")),
VAL_FROM_INT(61),
VAL_FROM_INT(32))))), LIST()),
NODE(RefContext, 1, STR("Peg")))),
NODE(SeqLexRules, 1, LIST(NODE(RefContext, 1, STR("String")))),
NODE(SeqLexRules, 1, LIST(NODE(RefContext, 1, STR("Regexp")))),
NODE(RefPartialContext, 1, STR("*Spaces")))),
NODE(Lex, 2, STR("Lex"), LIST(NODE(BeginCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, NODE(String, 1, STR("[")), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("begin.lex"))))))))),
NODE(EndCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, NODE(String, 1, STR("]")), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("end.lex"))),
NODE(Call, 2, STR(":parse"), LIST()))))))),
NODE(SeqLexRules, 1, LIST(NODE(RefContext, 1, STR("Regexp")))),
NODE(SeqLexRules, 1, LIST(NODE(RefContext, 1, STR("String")))),
NODE(SeqLexRules, 1, LIST(NODE(RefContext, 1, STR("Callback")))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(98),
VAL_FROM_INT(101),
VAL_FROM_INT(103),
VAL_FROM_INT(105),
VAL_FROM_INT(110),
NODE(PredefAnchor, 1, STR("\\b")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("kw.begin"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(101),
VAL_FROM_INT(110),
VAL_FROM_INT(100),
NODE(PredefAnchor, 1, STR("\\b")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("kw.end"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(42),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(65), VAL_FROM_INT(90)))),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.context.partial"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(65), VAL_FROM_INT(90)))),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.context"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(97), VAL_FROM_INT(122)))),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.var"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(PredefAnchor, 1, STR("$")),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(97), VAL_FROM_INT(122)))),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.var.global"))))))))),
NODE(RefPartialContext, 1, STR("*Spaces")))),
NODE(Lex, 2, STR("Peg"), LIST(NODE(BeginCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, NODE(String, 1, STR("[")), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("begin.peg"))))))))),
NODE(EndCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, NODE(String, 1, STR("]")), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("end.peg"))),
NODE(Call, 2, STR(":parse"), LIST()))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(65), VAL_FROM_INT(90)))),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")),
NODE(Quantified, 2, NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(46),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("+")))))), STR("*")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.rule"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(97), VAL_FROM_INT(122)))),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")),
NODE(Quantified, 2, NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(45),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("+")))))), STR("*")),
NODE(Quantified, 2, NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(46),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("+")),
NODE(Quantified, 2, NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(45),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("+")))))), STR("*")))))), STR("*")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.token"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(String, 1, STR(":")), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.def"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(42), VAL_FROM_INT(42)),
NODE(CharRange, 2, VAL_FROM_INT(63), VAL_FROM_INT(63)),
NODE(CharRange, 2, VAL_FROM_INT(43), VAL_FROM_INT(43)))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.quantifier"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(String, 1, STR("!")), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.extract"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(String, 1, STR("?!")), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.extract.maybe"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(62), VAL_FROM_INT(62)),
NODE(CharRange, 2, VAL_FROM_INT(60), VAL_FROM_INT(60)))),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(42), VAL_FROM_INT(42)),
NODE(CharRange, 2, VAL_FROM_INT(63), VAL_FROM_INT(63)),
NODE(CharRange, 2, VAL_FROM_INT(43), VAL_FROM_INT(43)))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.branch.quantified"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(47),
NODE(PredefAnchor, 1, STR("$")),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("+")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.branch.op-table"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(String, 1, STR("/")), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.branch"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(RefContext, 1, STR("Callback")))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(38), VAL_FROM_INT(38)),
NODE(CharRange, 2, VAL_FROM_INT(94), VAL_FROM_INT(94)))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.lookahead"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(64),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("+")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.pattern"))))))))),
NODE(RefPartialContext, 1, STR("*Spaces")))),
NODE(Lex, 2, STR("Callback"), LIST(NODE(BeginCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, NODE(String, 1, STR("{")), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("begin.code"))))))))),
NODE(EndCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, NODE(String, 1, STR("}")), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("end.code"))),
NODE(Call, 2, STR(":parse"), LIST()))))))),
NODE(SeqLexRules, 1, LIST(NODE(RefContext, 1, STR("String")))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(36),
NODE(Quantified, 2, VAL_FROM_INT(45), STR("?")),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\d")), STR("+")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.var.capture"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(58),
NODE(Quantified, 2, NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharGroupPredef, 1, STR("\\w")),
NODE(CharRange, 2, VAL_FROM_INT(43), VAL_FROM_INT(43)),
NODE(CharRange, 2, VAL_FROM_INT(45), VAL_FROM_INT(45)),
NODE(CharRange, 2, VAL_FROM_INT(42), VAL_FROM_INT(42)),
NODE(CharRange, 2, VAL_FROM_INT(47), VAL_FROM_INT(47)),
NODE(CharRange, 2, VAL_FROM_INT(94), VAL_FROM_INT(94)),
NODE(CharRange, 2, VAL_FROM_INT(38), VAL_FROM_INT(38)),
NODE(CharRange, 2, VAL_FROM_INT(124), VAL_FROM_INT(124)),
NODE(CharRange, 2, VAL_FROM_INT(60), VAL_FROM_INT(60)),
NODE(CharRange, 2, VAL_FROM_INT(62), VAL_FROM_INT(62)),
NODE(CharRange, 2, VAL_FROM_INT(61), VAL_FROM_INT(61)),
NODE(CharRange, 2, VAL_FROM_INT(33), VAL_FROM_INT(33)),
NODE(CharRange, 2, VAL_FROM_INT(37), VAL_FROM_INT(37)),
NODE(CharRange, 2, VAL_FROM_INT(64), VAL_FROM_INT(64)))), STR("+")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.func"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(CharGroupPredef, 1, STR(".")),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("+")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.method"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(65), VAL_FROM_INT(90)))),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.type"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(105),
VAL_FROM_INT(102),
NODE(PredefAnchor, 1, STR("\\b")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("kw.if"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(101),
VAL_FROM_INT(108),
VAL_FROM_INT(115),
VAL_FROM_INT(101),
VAL_FROM_INT(10))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("kw.else"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(101),
VAL_FROM_INT(110),
VAL_FROM_INT(100),
NODE(PredefAnchor, 1, STR("\\b")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("kw.end"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(110),
VAL_FROM_INT(105),
VAL_FROM_INT(108),
NODE(PredefAnchor, 1, STR("\\b")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("lit.nil"),
VAL_FROM_INT(0),
VAL_NIL)))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(116),
VAL_FROM_INT(114),
VAL_FROM_INT(117),
VAL_FROM_INT(101),
VAL_FROM_INT(10))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("lit.true"),
VAL_FROM_INT(0),
VAL_TRUE)))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(102),
VAL_FROM_INT(97),
VAL_FROM_INT(108),
VAL_FROM_INT(115),
VAL_FROM_INT(101),
VAL_FROM_INT(10))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("lit.const"),
VAL_FROM_INT(0),
VAL_FALSE)))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(118),
VAL_FROM_INT(97),
VAL_FROM_INT(114),
NODE(PredefAnchor, 1, STR("\\b")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("kw.var"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, VAL_FROM_INT(45), STR("?")),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\d")), STR("+")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("lit.int"),
VAL_FROM_INT(0),
NODE(Call, 2, STR(":parse_int"), LIST(VAL_FROM_INT(0))))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(97), VAL_FROM_INT(122)))),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("name.var"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(38),
VAL_FROM_INT(38))),
NODE(Seq, 1, LIST(VAL_FROM_INT(124),
VAL_FROM_INT(124))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.infix.logic"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(62))),
NODE(Seq, 1, LIST(VAL_FROM_INT(60))),
NODE(Seq, 1, LIST(VAL_FROM_INT(62),
VAL_FROM_INT(61))),
NODE(Seq, 1, LIST(VAL_FROM_INT(60),
VAL_FROM_INT(61))),
NODE(Seq, 1, LIST(VAL_FROM_INT(61),
VAL_FROM_INT(61))),
NODE(Seq, 1, LIST(VAL_FROM_INT(33),
VAL_FROM_INT(61))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.infix.compare"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(43))),
NODE(Seq, 1, LIST(VAL_FROM_INT(45))),
NODE(Seq, 1, LIST(VAL_FROM_INT(94))),
NODE(Seq, 1, LIST(VAL_FROM_INT(38))),
NODE(Seq, 1, LIST(VAL_FROM_INT(124))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.infix.additive"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(42),
VAL_FROM_INT(42))),
NODE(Seq, 1, LIST(VAL_FROM_INT(42))),
NODE(Seq, 1, LIST(VAL_FROM_INT(47))),
NODE(Seq, 1, LIST(VAL_FROM_INT(37))),
NODE(Seq, 1, LIST(VAL_FROM_INT(64))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.infix.multitive"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(91))))),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\s")), STR("*")),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(42))))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("begin.list"),
VAL_FROM_INT(1))),
NODE(Call, 2, STR(":token"), LIST(STR("op.prefix.splat"),
VAL_FROM_INT(2))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(String, 1, STR("[")), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("begin.list"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(String, 1, STR("]")), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("end.list"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(String, 1, STR("(")), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("begin.paren"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(String, 1, STR(")")), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("end.paren"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(String, 1, STR("=")), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.eq"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(String, 1, STR("!")), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.prefix"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(44))))),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\s")), STR("*")),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(42))))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("space.eol"),
VAL_FROM_INT(1))),
NODE(VarRef, 1, STR("token")),
STR("op.prefix.splat"),
VAL_FROM_INT(2))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(44), VAL_FROM_INT(44)),
NODE(CharRange, 2, VAL_FROM_INT(10), VAL_FROM_INT(10)))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("space.eol"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(35),
NODE(Quantified, 2, NODE(BracketCharGroup, 2, STR("[^"), LIST(NODE(CharRange, 2, VAL_FROM_INT(10), VAL_FROM_INT(10)))), STR("*")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":style"), LIST(STR("comment"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, VAL_FROM_INT(32), STR("+")),
NODE(Group, 2, STR("?="), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(61))))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("space.pre-eq"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, VAL_FROM_INT(32), STR("+")))))), LIST(NODE(Callback, 1, LIST()))))))),
NODE(Lex, 2, STR("String"), LIST(NODE(BeginCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(34))))), LIST(NODE(Callback, 1, LIST(NODE(VarDecl, 1, STR("buf")),
NODE(Assign, 2, STR("buf"), STR("")),
NODE(Call, 2, STR(":token"), LIST(STR("begin.string"))))))))),
NODE(EndCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(34))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("end.string"))),
NODE(Call, 2, STR(":yield"), LIST(NODE(VarRef, 1, STR("buf")))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(92),
VAL_FROM_INT(120),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(CharGroupPredef, 1, STR("\\h")),
NODE(CharGroupPredef, 1, STR("\\h")))))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("char.hex"))),
NODE(Assign, 2, STR("buf"), NODE(Call, 2, STR(":concat_char"), LIST(NODE(VarRef, 1, STR("buf")),
NODE(Call, 2, STR(":char_hex"), LIST(VAL_FROM_INT(1)))))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(92),
VAL_FROM_INT(117),
VAL_FROM_INT(123),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\h")), STR("+")))))),
VAL_FROM_INT(125))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("char.ux"))),
NODE(Assign, 2, STR("buf"), NODE(Call, 2, STR(":concat_char"), LIST(NODE(VarRef, 1, STR("buf")),
NODE(Call, 2, STR(":char_hex"), LIST(VAL_FROM_INT(1)))))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(92),
VAL_FROM_INT(117),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(CharGroupPredef, 1, STR("\\h")),
NODE(CharGroupPredef, 1, STR("\\h")),
NODE(CharGroupPredef, 1, STR("\\h")),
NODE(CharGroupPredef, 1, STR("\\h")))))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("char.u4"))),
NODE(Assign, 2, STR("buf"), NODE(Call, 2, STR(":concat_char"), LIST(NODE(VarRef, 1, STR("buf")),
NODE(Call, 2, STR(":char_hex"), LIST(VAL_FROM_INT(1)))))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(92),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(97), VAL_FROM_INT(97)),
NODE(CharRange, 2, VAL_FROM_INT(98), VAL_FROM_INT(98)),
NODE(CharRange, 2, VAL_FROM_INT(102), VAL_FROM_INT(102)),
NODE(CharRange, 2, VAL_FROM_INT(116), VAL_FROM_INT(116)),
NODE(CharRange, 2, VAL_FROM_INT(110), VAL_FROM_INT(110)),
NODE(CharRange, 2, VAL_FROM_INT(114), VAL_FROM_INT(114)))))))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("char.escape.sp"))),
NODE(Assign, 2, STR("buf"), NODE(Call, 2, STR(":concat_char"), LIST(NODE(VarRef, 1, STR("buf")),
NODE(Call, 2, STR(":char_escape_sp"), LIST(VAL_FROM_INT(1)))))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(92),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(BracketCharGroup, 2, STR("[^"), LIST(NODE(CharRange, 2, VAL_FROM_INT(10), VAL_FROM_INT(10)))))))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("char.escape"))),
NODE(Assign, 2, STR("buf"), NODE(Call, 2, STR(":concat_char"), LIST(NODE(VarRef, 1, STR("buf")),
NODE(Call, 2, STR(":char_no_escape"), LIST(VAL_FROM_INT(1)))))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(CharGroupPredef, 1, STR(".")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("char"))),
NODE(Assign, 2, STR("buf"), NODE(Call, 2, STR(":concat_char"), LIST(NODE(VarRef, 1, STR("buf")),
NODE(Call, 2, STR(":char_no_escape"), LIST(VAL_FROM_INT(0)))))))))))))),
NODE(Lex, 2, STR("Regexp"), LIST(NODE(BeginCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, NODE(String, 1, STR("/")), LIST(NODE(Callback, 1, LIST(NODE(VarDecl, 1, STR("cg_stack")),
NODE(Assign, 2, STR("cg_stack"), VAL_NIL),
NODE(Call, 2, STR(":token"), LIST(STR("begin.regexp"))))))))),
NODE(EndCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, NODE(String, 1, STR("/")), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("end.regexp"))),
NODE(Call, 2, STR(":parse"), LIST()))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(94))),
NODE(Seq, 1, LIST(VAL_FROM_INT(36))),
NODE(Seq, 1, LIST(VAL_FROM_INT(92),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(98), VAL_FROM_INT(98)),
NODE(CharRange, 2, VAL_FROM_INT(66), VAL_FROM_INT(66)),
NODE(CharRange, 2, VAL_FROM_INT(97), VAL_FROM_INT(97)),
NODE(CharRange, 2, VAL_FROM_INT(65), VAL_FROM_INT(65)),
NODE(CharRange, 2, VAL_FROM_INT(122), VAL_FROM_INT(122)),
NODE(CharRange, 2, VAL_FROM_INT(90), VAL_FROM_INT(90)))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("anchor"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(92),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(100), VAL_FROM_INT(100)),
NODE(CharRange, 2, VAL_FROM_INT(68), VAL_FROM_INT(68)),
NODE(CharRange, 2, VAL_FROM_INT(119), VAL_FROM_INT(119)),
NODE(CharRange, 2, VAL_FROM_INT(87), VAL_FROM_INT(87)),
NODE(CharRange, 2, VAL_FROM_INT(104), VAL_FROM_INT(104)),
NODE(CharRange, 2, VAL_FROM_INT(72), VAL_FROM_INT(72)),
NODE(CharRange, 2, VAL_FROM_INT(115), VAL_FROM_INT(115)),
NODE(CharRange, 2, VAL_FROM_INT(83), VAL_FROM_INT(83)))))),
NODE(Seq, 1, LIST(VAL_FROM_INT(46))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("char-group.predef"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(92),
VAL_FROM_INT(112),
VAL_FROM_INT(123),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(65), VAL_FROM_INT(90)))),
NODE(Quantified, 2, NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(97), VAL_FROM_INT(122)))), STR("*")),
VAL_FROM_INT(125))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("unicode-char-class"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(RefContext, 1, STR("RegexpEscape")))),
NODE(RefPartialContext, 1, STR("*RegexpQuantifier")),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(String, 1, STR("|")), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("op.branch"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(91),
NODE(Quantified, 2, VAL_FROM_INT(94), STR("?")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("begin.char-group"))),
NODE(Assign, 2, STR("cg_stack"), NODE(CreateList, 1, LIST(NODE(SplatEntry, 1, NODE(VarRef, 1, STR("cg_stack"))),
VAL_TRUE))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(String, 1, STR("]")), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("end.char-group"))),
NODE(Assign, 2, STR("cg_stack"), NODE(Call, 2, STR(":tail"), LIST(NODE(VarRef, 1, STR("cg_stack"))))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(String, 1, STR("-")), LIST(NODE(Callback, 1, LIST(NODE(VarRef, 1, STR("if")),
NODE(VarRef, 1, STR("cg_stack")),
NODE(Call, 2, STR(":token"), LIST(STR("op.minus"))),
NODE(VarRef, 1, STR("else")),
NODE(Call, 2, STR(":token"), LIST(STR("char"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(123),
NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(65), VAL_FROM_INT(90)))),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("*")),
VAL_FROM_INT(125))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("interpolate.predef"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(String, 1, STR("(?i)")), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("flag.case-insensitive"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(String, 1, STR("(?I)")), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("flag.case-sensitive"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(40),
VAL_FROM_INT(63),
VAL_FROM_INT(101),
VAL_FROM_INT(58),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("+")),
NODE(Quantified, 2, NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(45),
NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\w")), STR("+")))))), STR("?")),
VAL_FROM_INT(41))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("flag.encoding"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(40))))),
NODE(Quantified, 2, NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(63),
VAL_FROM_INT(58))),
NODE(Seq, 1, LIST(VAL_FROM_INT(63),
VAL_FROM_INT(61))),
NODE(Seq, 1, LIST(VAL_FROM_INT(63),
VAL_FROM_INT(33))),
NODE(Seq, 1, LIST(VAL_FROM_INT(63),
VAL_FROM_INT(60),
VAL_FROM_INT(61))),
NODE(Seq, 1, LIST(VAL_FROM_INT(63),
VAL_FROM_INT(60),
VAL_FROM_INT(33))),
NODE(Seq, 1, LIST(VAL_FROM_INT(63),
VAL_FROM_INT(62))))), STR("?")))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("begin.group"),
VAL_FROM_INT(1))),
NODE(Call, 2, STR(":token"), LIST(STR("group.special"),
VAL_FROM_INT(2))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(String, 1, STR(")")), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("end.group"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\s")), STR("+")))))), LIST(NODE(Callback, 1, LIST()))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(BracketCharGroup, 2, STR("[^"), LIST(NODE(CharRange, 2, VAL_FROM_INT(10), VAL_FROM_INT(10)),
NODE(CharGroupPredef, 1, STR("\\s")))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("char"),
VAL_FROM_INT(0),
NODE(Call, 2, STR(":char_no_escape"), LIST(VAL_FROM_INT(0))))))))))))),
NODE(Lex, 2, STR("RegexpEscape"), LIST(NODE(BeginCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, NODE(String, 1, STR("\\\\")), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("char.escape"))))))))),
NODE(EndCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(120),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(CharGroupPredef, 1, STR("\\h")),
NODE(CharGroupPredef, 1, STR("\\h")))))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("char.escape"))),
NODE(Call, 2, STR(":yield"), LIST(NODE(Call, 2, STR(":char_hex"), LIST(VAL_FROM_INT(1))))))))))),
NODE(EndCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(117),
VAL_FROM_INT(123),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\h")), STR("+")))))),
VAL_FROM_INT(125))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("char.escape"))),
NODE(Call, 2, STR(":yield"), LIST(NODE(Call, 2, STR(":char_hex"), LIST(VAL_FROM_INT(1))))))))))),
NODE(EndCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(117),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(CharGroupPredef, 1, STR("\\h")),
NODE(CharGroupPredef, 1, STR("\\h")),
NODE(CharGroupPredef, 1, STR("\\h")),
NODE(CharGroupPredef, 1, STR("\\h")))))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("char.escape"))),
NODE(Call, 2, STR(":yield"), LIST(NODE(Call, 2, STR(":char_hex"), LIST(VAL_FROM_INT(1))))))))))),
NODE(EndCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(97), VAL_FROM_INT(97)),
NODE(CharRange, 2, VAL_FROM_INT(98), VAL_FROM_INT(98)),
NODE(CharRange, 2, VAL_FROM_INT(102), VAL_FROM_INT(102)),
NODE(CharRange, 2, VAL_FROM_INT(116), VAL_FROM_INT(116)),
NODE(CharRange, 2, VAL_FROM_INT(110), VAL_FROM_INT(110)),
NODE(CharRange, 2, VAL_FROM_INT(114), VAL_FROM_INT(114)))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("char.escape"))),
NODE(Call, 2, STR(":yield"), LIST(NODE(Call, 2, STR(":char_escape_sp"), LIST(VAL_FROM_INT(0))))))))))),
NODE(EndCallback, 2, VAL_NIL, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(BracketCharGroup, 2, STR("[^"), LIST(NODE(CharRange, 2, VAL_FROM_INT(10), VAL_FROM_INT(10)))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("char.escape"))),
NODE(Call, 2, STR(":yield"), LIST(NODE(Call, 2, STR(":char_no_escape"), LIST(VAL_FROM_INT(0))))))))))))),
NODE(Lex, 2, STR("*RegexpQuantifier"), LIST(NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(63),
VAL_FROM_INT(42),
VAL_FROM_INT(32))),
NODE(Seq, 1, LIST(VAL_FROM_INT(63),
VAL_FROM_INT(63),
VAL_FROM_INT(32))),
NODE(Seq, 1, LIST(VAL_FROM_INT(63),
VAL_FROM_INT(32))),
NODE(Seq, 1, LIST(VAL_FROM_INT(43),
VAL_FROM_INT(42),
VAL_FROM_INT(32))),
NODE(Seq, 1, LIST(VAL_FROM_INT(43),
VAL_FROM_INT(63),
VAL_FROM_INT(32))),
NODE(Seq, 1, LIST(VAL_FROM_INT(43),
VAL_FROM_INT(32))),
NODE(Seq, 1, LIST(VAL_FROM_INT(42),
VAL_FROM_INT(42),
VAL_FROM_INT(32))),
NODE(Seq, 1, LIST(VAL_FROM_INT(42),
VAL_FROM_INT(63),
VAL_FROM_INT(32))),
NODE(Seq, 1, LIST(VAL_FROM_INT(42))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("quantifier"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(123))))),
VAL_FROM_INT(32),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\d")), STR("+")))))),
VAL_FROM_INT(32),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(125))))),
VAL_FROM_INT(32),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(42), VAL_FROM_INT(42)),
NODE(CharRange, 2, VAL_FROM_INT(63), VAL_FROM_INT(63)))), STR("?")))))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("begin.quantifier"),
VAL_FROM_INT(1))),
NODE(Call, 2, STR(":token"), LIST(STR("quantifier.range.from"),
VAL_FROM_INT(2))),
NODE(Call, 2, STR(":token"), LIST(STR("end.quantifier"),
VAL_FROM_INT(3))),
NODE(Call, 2, STR(":token"), LIST(STR("quantifier.kind"),
VAL_FROM_INT(4))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(123))))),
VAL_FROM_INT(32),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\d")), STR("+")))))),
VAL_FROM_INT(32),
VAL_FROM_INT(44),
VAL_FROM_INT(32),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(CharGroupPredef, 1, STR("\\d")), STR("*")))))),
VAL_FROM_INT(32),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(125))))),
VAL_FROM_INT(32),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, NODE(BracketCharGroup, 2, STR("["), LIST(NODE(CharRange, 2, VAL_FROM_INT(42), VAL_FROM_INT(42)),
NODE(CharRange, 2, VAL_FROM_INT(63), VAL_FROM_INT(63)))), STR("?")))))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("begin.quantifier"),
VAL_FROM_INT(1))),
NODE(Call, 2, STR(":token"), LIST(STR("quantifier.range.from"),
VAL_FROM_INT(2))),
NODE(Call, 2, STR(":token"), LIST(STR("quantifier.range.to"),
VAL_FROM_INT(3))),
NODE(Call, 2, STR(":token"), LIST(STR("end.quantifier"),
VAL_FROM_INT(4))),
NODE(Call, 2, STR(":token"), LIST(STR("quantifier.kind"),
VAL_FROM_INT(5))))))))))),
NODE(Lex, 2, STR("*Spaces"), LIST(NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, VAL_FROM_INT(32), STR("+")),
NODE(Group, 2, STR("?="), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(123))))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("space.pre-callback"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, VAL_FROM_INT(32), STR("+")),
NODE(Group, 2, STR("?="), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(61))))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("space.pre-eq"))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, VAL_FROM_INT(32), STR("*")),
NODE(Quantified, 2, NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(35),
NODE(Quantified, 2, NODE(BracketCharGroup, 2, STR("[^"), LIST(NODE(CharRange, 2, VAL_FROM_INT(10), VAL_FROM_INT(10)))), STR("*")))))), STR("?")),
NODE(Group, 2, STR(""), LIST(NODE(Seq, 1, LIST(VAL_FROM_INT(10))),
NODE(Seq, 1, LIST(NODE(PredefAnchor, 1, STR("\\z")))))))))), LIST(NODE(Callback, 1, LIST(NODE(Call, 2, STR(":token"), LIST(STR("space.eol"))),
NODE(Call, 2, STR(":style"), LIST(STR("comment"),
VAL_FROM_INT(1))))))))),
NODE(SeqLexRules, 1, LIST(NODE(LexRule, 2, NODE(Regexp, 1, LIST(NODE(Seq, 1, LIST(NODE(Quantified, 2, VAL_FROM_INT(32), STR("+")))))), LIST(NODE(Callback, 1, LIST()))))))),
NODE(Peg, 2, STR("Main"), LIST(NODE(PegRule, 2, STR("Main"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("Line"), STR("*"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Main"), LIST(NODE(Capture, 1, STR("$1")))))))))),
NODE(PegRule, 2, STR("Line"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("space.eol"), VAL_NIL)), LIST()),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("Ins"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1"))))))))),
NODE(PegRule, 2, STR("Ins"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("kw.pattern"), VAL_NIL),
NODE(Term, 2, STR("name.pattern"), VAL_NIL),
NODE(Term, 2, STR("space.pre-eq"), VAL_NIL),
NODE(Term, 2, STR("op.eq"), VAL_NIL),
NODE(Term, 2, STR("Pattern"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("PatternIns"), LIST(NODE(Capture, 1, STR("$2")),
NODE(Capture, 1, STR("$5")))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("kw.var"), VAL_NIL),
NODE(Term, 2, STR("name.var"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("VarDecl"), LIST(NODE(Capture, 1, STR("$2"))))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("kw.lex"), VAL_NIL),
NODE(Term, 2, STR("name.context"), VAL_NIL),
NODE(Term, 2, STR("Lex"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Lex"), LIST(NODE(Capture, 1, STR("$2")),
NODE(Capture, 1, STR("$3"))))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("kw.peg"), VAL_NIL),
NODE(Term, 2, STR("name.context"), VAL_NIL),
NODE(Term, 2, STR("Peg"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Peg"), LIST(NODE(Capture, 1, STR("$2")),
NODE(Capture, 1, STR("$3"))))))))))),
NODE(PegRule, 2, STR("Pattern"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("String"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("Regexp"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1"))))))))))),
NODE(Peg, 2, STR("Lex"), LIST(NODE(PegRule, 2, STR("Lex"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("begin.lex"), VAL_NIL),
NODE(Term, 2, STR("RuleLine"), STR("*")),
NODE(Term, 2, STR("end.lex"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$2")))))))),
NODE(PegRule, 2, STR("RuleLine"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("name.context.partial"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("RefPartialContext"), LIST(NODE(Capture, 1, STR("$1")))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("name.context"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("RefContext"), LIST(NODE(Capture, 1, STR("$1"))))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("Rule"), STR("+"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("SeqLexRules"), LIST(NODE(Capture, 1, STR("$1"))))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("kw.begin"), VAL_NIL),
NODE(Term, 2, STR("Callback"), STR("?")),
NODE(Term, 2, STR("Rule"), STR("+"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("BeginCallback"), LIST(NODE(Capture, 1, STR("$2")),
NODE(Capture, 1, STR("$3"))))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("kw.end"), VAL_NIL),
NODE(Term, 2, STR("Callback"), VAL_NIL),
NODE(Term, 2, STR("Rule"), STR("+"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("EndCallback"), LIST(NODE(Capture, 1, STR("$2")),
NODE(Capture, 1, STR("$3"))))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("space.eol"), VAL_NIL)), LIST())))),
NODE(PegRule, 2, STR("Rule"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("Pattern"), VAL_NIL),
NODE(Term, 2, STR("space.pre-callback"), STR("*")),
NODE(Term, 2, STR("Callback"), STR("?"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("LexRule"), LIST(NODE(Capture, 1, STR("$1")),
NODE(Capture, 1, STR("$3")))))))))),
NODE(PegRule, 2, STR("Pattern"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("String"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("Regexp"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1"))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("name.var"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("VarRef"), LIST(NODE(Capture, 1, STR("$1"))))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("name.var.global"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("GlobalVarRef"), LIST(NODE(Capture, 1, STR("$1"))))))))))))),
NODE(Peg, 2, STR("Peg"), LIST(NODE(PegRule, 2, STR("Peg"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("begin.peg"), VAL_NIL),
NODE(Term, 2, STR("Rule"), STR("*")),
NODE(Term, 2, STR("end.peg"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$2")))))))),
NODE(PegRule, 2, STR("Rule"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("name.rule"), VAL_NIL),
NODE(Term, 2, STR("op.def"), VAL_NIL),
NODE(Term, 2, STR("space.eol"), STR("?")),
NODE(Term, 2, STR("RuleBody"), VAL_NIL),
NODE(Term, 2, STR("space.eol"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("PegRule"), LIST(NODE(Capture, 1, STR("$1")),
NODE(Capture, 1, STR("$4")))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("space.eol"), VAL_NIL)), LIST())))),
NODE(PegRule, 2, STR("RuleBody"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("SeqRule"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateList, 1, LIST(NODE(Capture, 1, STR("$1")))))))),
NODE(BranchRight, 2, STR(">*"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("space.eol"), STR("?")),
NODE(Term, 2, STR("BranchRight"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateList, 1, LIST(NODE(SplatEntry, 1, NODE(Capture, 1, STR("$1"))),
NODE(Capture, 1, STR("$3"))))))))))),
NODE(PegRule, 2, STR("BranchRight"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("op.branch.quantified"), VAL_NIL),
NODE(Term, 2, STR("SeqRule"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("BranchRight"), LIST(NODE(Capture, 1, STR("$1")),
NODE(Capture, 1, STR("$2")))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("op.branch"), VAL_NIL),
NODE(Term, 2, STR("SeqRule"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("BranchRight"), LIST(NODE(Capture, 1, STR("$1")),
NODE(Capture, 1, STR("$2"))))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("op.branch.op-table"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("OpBranchRight"), LIST(NODE(Capture, 1, STR("$1"))))))))))),
NODE(PegRule, 2, STR("SeqRule"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("Term"), STR("+")),
NODE(Term, 2, STR("Callback"), STR("?"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("SeqRule"), LIST(NODE(Capture, 1, STR("$1")),
NODE(Capture, 1, STR("$2")))))))))),
NODE(PegRule, 2, STR("Term"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("Name"), VAL_NIL),
NODE(Term, 2, STR("op.quantified"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Term"), LIST(NODE(Capture, 1, STR("$1")),
NODE(Capture, 1, STR("$2")))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("Name"), VAL_NIL),
NODE(Term, 2, STR("op.extract"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Term"), LIST(NODE(Capture, 1, STR("$1")),
NODE(Capture, 1, STR("$2"))))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("Name"), VAL_NIL),
NODE(Term, 2, STR("op.extract.maybe"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Term"), LIST(NODE(Capture, 1, STR("$1")),
NODE(Capture, 1, STR("$2"))))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("Name"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Term"), LIST(NODE(Capture, 1, STR("$1")),
VAL_NIL))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("op.lookahead"), VAL_NIL),
NODE(Term, 2, STR("LookaheadName"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Lookahead"), LIST(NODE(Capture, 1, STR("$1")),
NODE(Capture, 1, STR("$2"))))))))))),
NODE(PegRule, 2, STR("Name"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("name.token"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("name.rule"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1"))))))))),
NODE(PegRule, 2, STR("LookaheadName"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("name.token"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("name.rule"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1"))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("name.pattern"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1"))))))))))),
NODE(Peg, 2, STR("Callback"), LIST(NODE(PegRule, 2, STR("Callback"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("begin.code"), VAL_NIL),
NODE(Term, 2, STR("Stmt"), STR("*")),
NODE(Term, 2, STR("end.code"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Callback"), LIST(NODE(Capture, 1, STR("$2")))))))))),
NODE(PegRule, 2, STR("Stmt"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("Expr"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("space.eol"), VAL_NIL)), LIST())),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("kw.var"), VAL_NIL),
NODE(Term, 2, STR("name.var"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("VarDecl"), LIST(NODE(Capture, 1, STR("$2"))))))))))),
NODE(PegRule, 2, STR("Expr"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("Infix.Logic"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))))),
NODE(PegRule, 2, STR("Infix.Logic"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("Infix.Compare"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))),
NODE(BranchRight, 2, STR(">*"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("op.infix.logic"), VAL_NIL),
NODE(Term, 2, STR("Infix.Compare"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("InfixLogic"), LIST(NODE(Capture, 1, STR("$2")),
NODE(CreateList, 1, LIST(NODE(Capture, 1, STR("$3")),
NODE(Capture, 1, STR("$1"))))))))))))),
NODE(PegRule, 2, STR("Infix.Compare"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("Infix.Additive"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))),
NODE(BranchRight, 2, STR(">*"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("op.infix.compare"), VAL_NIL),
NODE(Term, 2, STR("Infix.Additive"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Call"), LIST(NODE(Capture, 1, STR("$2")),
NODE(CreateList, 1, LIST(NODE(Capture, 1, STR("$3")),
NODE(Capture, 1, STR("$1"))))))))))))),
NODE(PegRule, 2, STR("Infix.Additive"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("Infix.Multitive"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))),
NODE(BranchRight, 2, STR(">*"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("op.infix.additive"), VAL_NIL),
NODE(Term, 2, STR("Infix.Multitive"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Call"), LIST(NODE(Capture, 1, STR("$2")),
NODE(CreateList, 1, LIST(NODE(Capture, 1, STR("$3")),
NODE(Capture, 1, STR("$1"))))))))))))),
NODE(PegRule, 2, STR("Infix.Multitive"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("Unit"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))),
NODE(BranchRight, 2, STR(">*"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("op.infix.multitive"), VAL_NIL),
NODE(Term, 2, STR("Unit"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Call"), LIST(NODE(Capture, 1, STR("$2")),
NODE(CreateList, 1, LIST(NODE(Capture, 1, STR("$3")),
NODE(Capture, 1, STR("$1"))))))))))))),
NODE(PegRule, 2, STR("Unit"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("begin.paren"), VAL_NIL),
NODE(Term, 2, STR("Expr"), VAL_NIL),
NODE(Term, 2, STR("end.paren"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$2")))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("op.prefix"), VAL_NIL),
NODE(Term, 2, STR("Unit"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Call"), LIST(NODE(Capture, 1, STR("$1")),
NODE(Capture, 1, STR("$2"))))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("lit.int"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1"))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("lit.true"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1"))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("lit.false"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1"))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("lit.nil"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1"))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("String"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1"))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("name.var.capture"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Capture"), LIST(NODE(Capture, 1, STR("$1"))))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("name.type"), VAL_NIL),
NODE(Term, 2, STR("begin.list"), VAL_NIL),
NODE(Term, 2, STR("Entry"), STR("*")),
NODE(Term, 2, STR("end.list"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("CreateNode"), LIST(NODE(Capture, 1, STR("$1")),
NODE(Capture, 1, STR("$3"))))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("begin.list"), VAL_NIL),
NODE(Term, 2, STR("Entry"), STR("*")),
NODE(Term, 2, STR("end.list"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("CreateList"), LIST(NODE(Capture, 1, STR("$2"))))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("name.func"), VAL_NIL),
NODE(Term, 2, STR("Expr"), STR("*"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Call"), LIST(NODE(Capture, 1, STR("$1")),
NODE(Capture, 1, STR("$2"))))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("name.var"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("VarRef"), LIST(NODE(Capture, 1, STR("$1"))))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("If"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1"))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("name.var"), VAL_NIL),
NODE(Term, 2, STR("space.pre-eq"), VAL_NIL),
NODE(Term, 2, STR("op.eq"), VAL_NIL),
NODE(Term, 2, STR("Expr"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Assign"), LIST(NODE(Capture, 1, STR("$1")),
NODE(Capture, 1, STR("$4"))))))))))),
NODE(PegRule, 2, STR("Entry"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("Expr"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("op.prefix.splat"), VAL_NIL),
NODE(Term, 2, STR("Expr"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("SplatEntry"), LIST(NODE(Capture, 1, STR("$2"))))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("space.eol"), VAL_NIL)), LIST())))),
NODE(PegRule, 2, STR("Line"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("Expr"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("space.eol"), VAL_NIL)), LIST())))),
NODE(PegRule, 2, STR("If"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("kw.if"), VAL_NIL),
NODE(Term, 2, STR("Expr"), VAL_NIL),
NODE(Term, 2, STR("space.eol"), VAL_NIL),
NODE(Term, 2, STR("Line"), STR("*")),
NODE(Term, 2, STR("If.Else"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("If"), LIST(NODE(Capture, 1, STR("$2")),
NODE(Capture, 1, STR("$4")),
NODE(Capture, 1, STR("$5")))))))))),
NODE(PegRule, 2, STR("If.Else"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("kw.end"), VAL_NIL)), LIST()),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("kw.else"), VAL_NIL),
NODE(Term, 2, STR("Line"), STR("*")),
NODE(Term, 2, STR("kw.end"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$2"))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("kw.else"), VAL_NIL),
NODE(Term, 2, STR("If"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$2"))))))))))),
NODE(Peg, 2, STR("Regexp"), LIST(NODE(PegRule, 2, STR("Regexp"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("begin.regexp"), VAL_NIL),
NODE(Term, 2, STR("Branches"), VAL_NIL),
NODE(Term, 2, STR("end.regexp"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Regexp"), LIST(NODE(Capture, 1, STR("$2")))))))))),
NODE(PegRule, 2, STR("Branches"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("Seq"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateList, 1, LIST(NODE(Capture, 1, STR("$1")))))))),
NODE(BranchRight, 2, STR(">*"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("op.branch"), VAL_NIL),
NODE(Term, 2, STR("Seq"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateList, 1, LIST(NODE(SplatEntry, 1, NODE(Capture, 1, STR("$1"))),
NODE(Capture, 1, STR("$3"))))))))))),
NODE(PegRule, 2, STR("Seq"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("SeqUnit"), STR("*"))), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Seq"), LIST(NODE(Capture, 1, STR("$1")))))))))),
NODE(PegRule, 2, STR("SeqUnit"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("anchor"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("PredefAnchor"), LIST(NODE(Capture, 1, STR("$1")))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("flag.case-insensitive"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Flag"), LIST(NODE(Capture, 1, STR("$1"))))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("flag.case-sensitive"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Flag"), LIST(NODE(Capture, 1, STR("$1"))))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("flag.encoding"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Flag"), LIST(NODE(Capture, 1, STR("$1"))))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("Unit"), VAL_NIL),
NODE(Term, 2, STR("quantifier"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Quantified"), LIST(NODE(Capture, 1, STR("$1")),
NODE(Capture, 1, STR("$2"))))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("Unit"), VAL_NIL),
NODE(Term, 2, STR("begin.quantifier"), VAL_NIL),
NODE(Term, 2, STR("quantifier.range.from"), VAL_NIL),
NODE(Term, 2, STR("quantifier.range.to"), STR("?")),
NODE(Term, 2, STR("end.quantifier"), VAL_NIL),
NODE(Term, 2, STR("quantifier.kind"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("QuantifiedRange"), LIST(NODE(Capture, 1, STR("$1")),
NODE(Capture, 1, STR("$3")),
NODE(Capture, 1, STR("$4")),
NODE(Capture, 1, STR("$6"))))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("Unit"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Unit"), LIST(NODE(Capture, 1, STR("$1"))))))))))),
NODE(PegRule, 2, STR("Unit"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("SingleChar"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("CharGroup"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1"))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("Group"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1"))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("interpolate.predef"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1"))))))))),
NODE(PegRule, 2, STR("SingleChar"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("RegexpEscape"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("char"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1"))))))))),
NODE(PegRule, 2, STR("Group"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("begin.group"), VAL_NIL),
NODE(Term, 2, STR("group.special"), VAL_NIL),
NODE(Term, 2, STR("Branches"), VAL_NIL),
NODE(Term, 2, STR("end.group"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("Group"), LIST(NODE(Capture, 1, STR("$2")),
NODE(Capture, 1, STR("$3")))))))))),
NODE(PegRule, 2, STR("CharGroup"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("char-group.predef"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("CharGroupPredef"), LIST(NODE(Capture, 1, STR("$1")))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("unicode-char-class"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("UnicodeCharClass"), LIST(NODE(Capture, 1, STR("$1"))))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("begin.char-group"), VAL_NIL),
NODE(Term, 2, STR("CharClass"), STR("+")),
NODE(Term, 2, STR("end.char-group"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("BracketCharGroup"), LIST(NODE(Capture, 1, STR("$1")),
NODE(Capture, 1, STR("$2"))))))))))),
NODE(PegRule, 2, STR("CharClass"), LIST(NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("CharGroup"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(Capture, 1, STR("$1")))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("SingleChar"), VAL_NIL),
NODE(Term, 2, STR("op.minus"), VAL_NIL),
NODE(Term, 2, STR("SingleChar"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("CharRange"), LIST(NODE(Capture, 1, STR("$1")),
NODE(Capture, 1, STR("$3"))))))))),
NODE(BranchRight, 2, STR("/"), NODE(SeqRule, 2, LIST(NODE(Term, 2, STR("SingleChar"), VAL_NIL)), LIST(NODE(Callback, 1, LIST(NODE(CreateNode, 2, STR("CharRange"), LIST(NODE(Capture, 1, STR("$1")),
NODE(Capture, 1, STR("$1")))))))))))))));
